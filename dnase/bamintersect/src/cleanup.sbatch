#!/bin/bash
set -eu -o pipefail

#SBATCH --job-name=cleanup
#SBATCH --mail-type=END
#SBATCH --mail-user=cadley.nyulangone@gmail.com

########################################################
## FINAL_OUTDIR is passed in via an sbatch export
## src is passed in via an sbatch export
## reads_match is passed in via an sbatch export
########################################################

echo In cleanup

ls -1 ${FINAL_OUTDIR}/bams/*.1.bam > "${FINAL_OUTDIR}/bams/chr_list_1"
ls -1 ${FINAL_OUTDIR}/bams/*.2.bam > "${FINAL_OUTDIR}/bams/chr_list_2"

TEMP_DIR_CL1="${FINAL_OUTDIR}/TEMP_DIR_CL1"
echo TEMP_DIR_CL1 is: ${TEMP_DIR_CL1}
mkdir ${TEMP_DIR_CL1}

## bam1 is a full path to the sorted, single chromosome bam file generated by sort_chrom.sbatch
## BASE1 looks like this (for each chromosome):         chr10.1.bam
## bam2 and BASE2 are similar.  BASE2 looks like this:  chr10_KL568015v1_random.2.bam
while read -r bam1; do
    while read -r bam2; do
        BASE1=${bam1##*/}    ## Get rid of the path before the bam file name.
        BASE2=${bam2##*/} 

        BASE1=${BASE1#*\.}   ## Get rid of the sample name.
        BASE2=${BASE2#*\.} 

        echo ${bam1} ${bam2} "${TEMP_DIR_CL1}/${BASE1}___${BASE2}"  >> "${FINAL_OUTDIR}/bams/array_list"
    done < "${FINAL_OUTDIR}/bams/chr_list_2"
done < "${FINAL_OUTDIR}/bams/chr_list_1"

num_lines=$(wc -l < "${FINAL_OUTDIR}/bams/array_list")
echo num_lines is: ${num_lines}
pwd


## Regarding the size of the sbatch array job we are about to launch:
## N1 = (# of bam1 numbered chromosomes) + (4 [for X,Y,M, and "all_other"])
## N2 = (# of bam2 numbered chromosomes) + (4 [for X,Y,M, and "all_other"])
## Number of array jobs = N1 * N2.
## As an example, mm10 vs rn6 generates 552 jobs:  (19 + 3 + 1) * (20 + 3 + 1)
##
## As long as the number of array jobs is less than 10,000 we will pass through the
## below while loop just once. sbatch will launch all (N1 * N2) jobs in a single array call.

array_incr=10000
array_start=1
array_end=${array_incr}
while :
do
    if [ ${array_end} -gt ${num_lines} ]; then
        array_end=${num_lines}
    fi

    export_vars="FINAL_OUTDIR=${FINAL_OUTDIR}"
    export_vars="${export_vars},src=${src}"
    export_vars="${export_vars},reads_match=${reads_match}"

    ## Max possible value for array end is 100,000
    ## Max possible number of jobs is 50,000
    sbatch --parsable --wait --export="ALL,${export_vars}" --array="${array_start}-${array_end}" \
           --output="${FINAL_OUTDIR}/log/bam_intersect_array.o_%A_%a" "${src}/bam_intersect_array.sbatch"

    if [ ${array_end} -eq ${num_lines} ]; then
        break
    else
        let "array_start = ${array_start} + ${array_incr}"
        let "array_end = ${array_end} + ${array_incr}"
    fi
done

##########################################################################################################
## Merge the bam_intersect output files:

dir_names=($(ls -d ${FINAL_OUTDIR}/TEMP_DIR_CL1/*/))      ## These have a trailing /

first="True"
for i in ${dir_names[@]}; do
    if [ ${first} = "True" ]; then
        cp "${i}dsgrep_out.csv" "${FINAL_OUTDIR}/f1.bed"
        first="False"
    else
        cat "${i}dsgrep_out.csv" >> "${FINAL_OUTDIR}/f1.bed"
    fi
done

date
echo Sorting...
sort-bed "${FINAL_OUTDIR}/f1.bed" > "${FINAL_OUTDIR}/combined_tsv_files.bed"

date
echo Deleting files and directories...

rm "${FINAL_OUTDIR}/f1.bed"
rm -r "${FINAL_OUTDIR}/TEMP_DIR_CL1"
rm -r "${FINAL_OUTDIR}/bams"

date
echo Leaving cleanup

exit 0

##########################################################################################################
## WIP:

## Create the final output files.

echo final_csv_delete: "${final_csv_delete}"     ##  passed in via an sbatch export

size=${#final_csv_delete}
if [ ${size} -lt 1 ]; then
    delete_ranges=NA
else
    IFS='|' read -ra delete_ranges <<< "${final_csv_delete}"
fi

## ./filter_tsv.bash ${FINAL_OUTDIR} ${hg38_5p_HA} ${hg38_3p_HA} "${delete_ranges[@]}"

date
echo Leaving cleanup

